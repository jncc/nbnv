package uk.org.nbn.nbnv.importer

import data.{Database, QueryCache, Repository, KeyGenerator}
import ingestion.FeatureIngester
import injection.ImporterModule
import spatial.GridSquareInfoFactory
import testing.BaseFunSuite
import utility.ResourceLoader
import uk.org.nbn.nbnv.PersistenceUtility
import org.mockito.Mockito._
import java.io.{File, InputStream}
import org.apache.log4j.Logger
import com.google.inject.Guice

/// This is an end-to-end test suite which requires the database.

class SmokeSuiteIT extends BaseFunSuite with ResourceLoader {

  def fixture(archivePath: String) = new {

    val tempDir = ".\\temp"
    new File(tempDir).mkdirs()

    val archive = resource(archivePath)
    val options = Options(archivePath = archive.getFile, tempDir = tempDir, whatIf = true)

    val importer = Importer.createImporter(options)
  }

  def simpleFixture = new {
    val qc = new QueryCache(mock[Logger])
    val em = new PersistenceUtility().createEntityManagerFactory(Settings.map).createEntityManager
    val db = new Database(em, new Repository(mock[Logger], em, qc), qc)
  }

  test("should be able to get next dataset key") {

    def f = simpleFixture
    val kg = new KeyGenerator(f.db)
    val key = kg.nextTaxonDatasetKey

    key should startWith ("GA")
    key should have length 8
  }

  test("should be able to get a site boundary feature") {

    val f = simpleFixture
    val i = new FeatureIngester(mock[Logger], f.db, new GridSquareInfoFactory(f.db))

    i.ensureSiteBoundaryFeature("GA000942E012")
  }

  test("should import a valid archive") {

    val f = fixture("/archives/valid.zip")
    f.importer.run()
  }

  test("should import a valid archive generated by the importer UI") {

    val f = fixture("/archives/valid_ui.zip")
    f.importer.run()
  }
}
